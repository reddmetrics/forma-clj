/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package forma.schema;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class NeighborValue implements org.apache.thrift.TBase<NeighborValue, NeighborValue._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NeighborValue");

  private static final org.apache.thrift.protocol.TField FIRE_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("fireValue", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField NUM_NEIGHBORS_FIELD_DESC = new org.apache.thrift.protocol.TField("numNeighbors", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField AVG_SHORT_DROP_FIELD_DESC = new org.apache.thrift.protocol.TField("avgShortDrop", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField MIN_SHORT_DROP_FIELD_DESC = new org.apache.thrift.protocol.TField("minShortDrop", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField AVG_LONG_DROP_FIELD_DESC = new org.apache.thrift.protocol.TField("avgLongDrop", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField MIN_LONG_DROP_FIELD_DESC = new org.apache.thrift.protocol.TField("minLongDrop", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField AVG_TSTAT_FIELD_DESC = new org.apache.thrift.protocol.TField("avgTStat", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField MIN_TSTAT_FIELD_DESC = new org.apache.thrift.protocol.TField("minTStat", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField AVG_PARAM_BREAK_FIELD_DESC = new org.apache.thrift.protocol.TField("avgParamBreak", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField MIN_PARAM_BREAK_FIELD_DESC = new org.apache.thrift.protocol.TField("minParamBreak", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField MAX_PARAM_BREAK_FIELD_DESC = new org.apache.thrift.protocol.TField("maxParamBreak", org.apache.thrift.protocol.TType.DOUBLE, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NeighborValueStandardSchemeFactory());
    schemes.put(TupleScheme.class, new NeighborValueTupleSchemeFactory());
  }

  public FireValue fireValue; // required
  public int numNeighbors; // required
  public double avgShortDrop; // required
  public double minShortDrop; // required
  public double avgLongDrop; // required
  public double minLongDrop; // required
  public double avgTStat; // required
  public double minTStat; // required
  public double avgParamBreak; // optional
  public double minParamBreak; // optional
  public double maxParamBreak; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FIRE_VALUE((short)1, "fireValue"),
    NUM_NEIGHBORS((short)2, "numNeighbors"),
    AVG_SHORT_DROP((short)3, "avgShortDrop"),
    MIN_SHORT_DROP((short)4, "minShortDrop"),
    AVG_LONG_DROP((short)5, "avgLongDrop"),
    MIN_LONG_DROP((short)6, "minLongDrop"),
    AVG_TSTAT((short)7, "avgTStat"),
    MIN_TSTAT((short)8, "minTStat"),
    AVG_PARAM_BREAK((short)9, "avgParamBreak"),
    MIN_PARAM_BREAK((short)10, "minParamBreak"),
    MAX_PARAM_BREAK((short)11, "maxParamBreak");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FIRE_VALUE
          return FIRE_VALUE;
        case 2: // NUM_NEIGHBORS
          return NUM_NEIGHBORS;
        case 3: // AVG_SHORT_DROP
          return AVG_SHORT_DROP;
        case 4: // MIN_SHORT_DROP
          return MIN_SHORT_DROP;
        case 5: // AVG_LONG_DROP
          return AVG_LONG_DROP;
        case 6: // MIN_LONG_DROP
          return MIN_LONG_DROP;
        case 7: // AVG_TSTAT
          return AVG_TSTAT;
        case 8: // MIN_TSTAT
          return MIN_TSTAT;
        case 9: // AVG_PARAM_BREAK
          return AVG_PARAM_BREAK;
        case 10: // MIN_PARAM_BREAK
          return MIN_PARAM_BREAK;
        case 11: // MAX_PARAM_BREAK
          return MAX_PARAM_BREAK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUMNEIGHBORS_ISSET_ID = 0;
  private static final int __AVGSHORTDROP_ISSET_ID = 1;
  private static final int __MINSHORTDROP_ISSET_ID = 2;
  private static final int __AVGLONGDROP_ISSET_ID = 3;
  private static final int __MINLONGDROP_ISSET_ID = 4;
  private static final int __AVGTSTAT_ISSET_ID = 5;
  private static final int __MINTSTAT_ISSET_ID = 6;
  private static final int __AVGPARAMBREAK_ISSET_ID = 7;
  private static final int __MINPARAMBREAK_ISSET_ID = 8;
  private static final int __MAXPARAMBREAK_ISSET_ID = 9;
  private BitSet __isset_bit_vector = new BitSet(10);
  private _Fields optionals[] = {_Fields.AVG_PARAM_BREAK,_Fields.MIN_PARAM_BREAK,_Fields.MAX_PARAM_BREAK};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIRE_VALUE, new org.apache.thrift.meta_data.FieldMetaData("fireValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FireValue.class)));
    tmpMap.put(_Fields.NUM_NEIGHBORS, new org.apache.thrift.meta_data.FieldMetaData("numNeighbors", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AVG_SHORT_DROP, new org.apache.thrift.meta_data.FieldMetaData("avgShortDrop", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MIN_SHORT_DROP, new org.apache.thrift.meta_data.FieldMetaData("minShortDrop", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AVG_LONG_DROP, new org.apache.thrift.meta_data.FieldMetaData("avgLongDrop", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MIN_LONG_DROP, new org.apache.thrift.meta_data.FieldMetaData("minLongDrop", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AVG_TSTAT, new org.apache.thrift.meta_data.FieldMetaData("avgTStat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MIN_TSTAT, new org.apache.thrift.meta_data.FieldMetaData("minTStat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AVG_PARAM_BREAK, new org.apache.thrift.meta_data.FieldMetaData("avgParamBreak", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MIN_PARAM_BREAK, new org.apache.thrift.meta_data.FieldMetaData("minParamBreak", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MAX_PARAM_BREAK, new org.apache.thrift.meta_data.FieldMetaData("maxParamBreak", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NeighborValue.class, metaDataMap);
  }

  public NeighborValue() {
  }

  public NeighborValue(
    FireValue fireValue,
    int numNeighbors,
    double avgShortDrop,
    double minShortDrop,
    double avgLongDrop,
    double minLongDrop,
    double avgTStat,
    double minTStat)
  {
    this();
    this.fireValue = fireValue;
    this.numNeighbors = numNeighbors;
    setNumNeighborsIsSet(true);
    this.avgShortDrop = avgShortDrop;
    setAvgShortDropIsSet(true);
    this.minShortDrop = minShortDrop;
    setMinShortDropIsSet(true);
    this.avgLongDrop = avgLongDrop;
    setAvgLongDropIsSet(true);
    this.minLongDrop = minLongDrop;
    setMinLongDropIsSet(true);
    this.avgTStat = avgTStat;
    setAvgTStatIsSet(true);
    this.minTStat = minTStat;
    setMinTStatIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NeighborValue(NeighborValue other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetFireValue()) {
      this.fireValue = new FireValue(other.fireValue);
    }
    this.numNeighbors = other.numNeighbors;
    this.avgShortDrop = other.avgShortDrop;
    this.minShortDrop = other.minShortDrop;
    this.avgLongDrop = other.avgLongDrop;
    this.minLongDrop = other.minLongDrop;
    this.avgTStat = other.avgTStat;
    this.minTStat = other.minTStat;
    this.avgParamBreak = other.avgParamBreak;
    this.minParamBreak = other.minParamBreak;
    this.maxParamBreak = other.maxParamBreak;
  }

  public NeighborValue deepCopy() {
    return new NeighborValue(this);
  }

  @Override
  public void clear() {
    this.fireValue = null;
    setNumNeighborsIsSet(false);
    this.numNeighbors = 0;
    setAvgShortDropIsSet(false);
    this.avgShortDrop = 0.0;
    setMinShortDropIsSet(false);
    this.minShortDrop = 0.0;
    setAvgLongDropIsSet(false);
    this.avgLongDrop = 0.0;
    setMinLongDropIsSet(false);
    this.minLongDrop = 0.0;
    setAvgTStatIsSet(false);
    this.avgTStat = 0.0;
    setMinTStatIsSet(false);
    this.minTStat = 0.0;
    setAvgParamBreakIsSet(false);
    this.avgParamBreak = 0.0;
    setMinParamBreakIsSet(false);
    this.minParamBreak = 0.0;
    setMaxParamBreakIsSet(false);
    this.maxParamBreak = 0.0;
  }

  public FireValue getFireValue() {
    return this.fireValue;
  }

  public NeighborValue setFireValue(FireValue fireValue) {
    this.fireValue = fireValue;
    return this;
  }

  public void unsetFireValue() {
    this.fireValue = null;
  }

  /** Returns true if field fireValue is set (has been assigned a value) and false otherwise */
  public boolean isSetFireValue() {
    return this.fireValue != null;
  }

  public void setFireValueIsSet(boolean value) {
    if (!value) {
      this.fireValue = null;
    }
  }

  public int getNumNeighbors() {
    return this.numNeighbors;
  }

  public NeighborValue setNumNeighbors(int numNeighbors) {
    this.numNeighbors = numNeighbors;
    setNumNeighborsIsSet(true);
    return this;
  }

  public void unsetNumNeighbors() {
    __isset_bit_vector.clear(__NUMNEIGHBORS_ISSET_ID);
  }

  /** Returns true if field numNeighbors is set (has been assigned a value) and false otherwise */
  public boolean isSetNumNeighbors() {
    return __isset_bit_vector.get(__NUMNEIGHBORS_ISSET_ID);
  }

  public void setNumNeighborsIsSet(boolean value) {
    __isset_bit_vector.set(__NUMNEIGHBORS_ISSET_ID, value);
  }

  public double getAvgShortDrop() {
    return this.avgShortDrop;
  }

  public NeighborValue setAvgShortDrop(double avgShortDrop) {
    this.avgShortDrop = avgShortDrop;
    setAvgShortDropIsSet(true);
    return this;
  }

  public void unsetAvgShortDrop() {
    __isset_bit_vector.clear(__AVGSHORTDROP_ISSET_ID);
  }

  /** Returns true if field avgShortDrop is set (has been assigned a value) and false otherwise */
  public boolean isSetAvgShortDrop() {
    return __isset_bit_vector.get(__AVGSHORTDROP_ISSET_ID);
  }

  public void setAvgShortDropIsSet(boolean value) {
    __isset_bit_vector.set(__AVGSHORTDROP_ISSET_ID, value);
  }

  public double getMinShortDrop() {
    return this.minShortDrop;
  }

  public NeighborValue setMinShortDrop(double minShortDrop) {
    this.minShortDrop = minShortDrop;
    setMinShortDropIsSet(true);
    return this;
  }

  public void unsetMinShortDrop() {
    __isset_bit_vector.clear(__MINSHORTDROP_ISSET_ID);
  }

  /** Returns true if field minShortDrop is set (has been assigned a value) and false otherwise */
  public boolean isSetMinShortDrop() {
    return __isset_bit_vector.get(__MINSHORTDROP_ISSET_ID);
  }

  public void setMinShortDropIsSet(boolean value) {
    __isset_bit_vector.set(__MINSHORTDROP_ISSET_ID, value);
  }

  public double getAvgLongDrop() {
    return this.avgLongDrop;
  }

  public NeighborValue setAvgLongDrop(double avgLongDrop) {
    this.avgLongDrop = avgLongDrop;
    setAvgLongDropIsSet(true);
    return this;
  }

  public void unsetAvgLongDrop() {
    __isset_bit_vector.clear(__AVGLONGDROP_ISSET_ID);
  }

  /** Returns true if field avgLongDrop is set (has been assigned a value) and false otherwise */
  public boolean isSetAvgLongDrop() {
    return __isset_bit_vector.get(__AVGLONGDROP_ISSET_ID);
  }

  public void setAvgLongDropIsSet(boolean value) {
    __isset_bit_vector.set(__AVGLONGDROP_ISSET_ID, value);
  }

  public double getMinLongDrop() {
    return this.minLongDrop;
  }

  public NeighborValue setMinLongDrop(double minLongDrop) {
    this.minLongDrop = minLongDrop;
    setMinLongDropIsSet(true);
    return this;
  }

  public void unsetMinLongDrop() {
    __isset_bit_vector.clear(__MINLONGDROP_ISSET_ID);
  }

  /** Returns true if field minLongDrop is set (has been assigned a value) and false otherwise */
  public boolean isSetMinLongDrop() {
    return __isset_bit_vector.get(__MINLONGDROP_ISSET_ID);
  }

  public void setMinLongDropIsSet(boolean value) {
    __isset_bit_vector.set(__MINLONGDROP_ISSET_ID, value);
  }

  public double getAvgTStat() {
    return this.avgTStat;
  }

  public NeighborValue setAvgTStat(double avgTStat) {
    this.avgTStat = avgTStat;
    setAvgTStatIsSet(true);
    return this;
  }

  public void unsetAvgTStat() {
    __isset_bit_vector.clear(__AVGTSTAT_ISSET_ID);
  }

  /** Returns true if field avgTStat is set (has been assigned a value) and false otherwise */
  public boolean isSetAvgTStat() {
    return __isset_bit_vector.get(__AVGTSTAT_ISSET_ID);
  }

  public void setAvgTStatIsSet(boolean value) {
    __isset_bit_vector.set(__AVGTSTAT_ISSET_ID, value);
  }

  public double getMinTStat() {
    return this.minTStat;
  }

  public NeighborValue setMinTStat(double minTStat) {
    this.minTStat = minTStat;
    setMinTStatIsSet(true);
    return this;
  }

  public void unsetMinTStat() {
    __isset_bit_vector.clear(__MINTSTAT_ISSET_ID);
  }

  /** Returns true if field minTStat is set (has been assigned a value) and false otherwise */
  public boolean isSetMinTStat() {
    return __isset_bit_vector.get(__MINTSTAT_ISSET_ID);
  }

  public void setMinTStatIsSet(boolean value) {
    __isset_bit_vector.set(__MINTSTAT_ISSET_ID, value);
  }

  public double getAvgParamBreak() {
    return this.avgParamBreak;
  }

  public NeighborValue setAvgParamBreak(double avgParamBreak) {
    this.avgParamBreak = avgParamBreak;
    setAvgParamBreakIsSet(true);
    return this;
  }

  public void unsetAvgParamBreak() {
    __isset_bit_vector.clear(__AVGPARAMBREAK_ISSET_ID);
  }

  /** Returns true if field avgParamBreak is set (has been assigned a value) and false otherwise */
  public boolean isSetAvgParamBreak() {
    return __isset_bit_vector.get(__AVGPARAMBREAK_ISSET_ID);
  }

  public void setAvgParamBreakIsSet(boolean value) {
    __isset_bit_vector.set(__AVGPARAMBREAK_ISSET_ID, value);
  }

  public double getMinParamBreak() {
    return this.minParamBreak;
  }

  public NeighborValue setMinParamBreak(double minParamBreak) {
    this.minParamBreak = minParamBreak;
    setMinParamBreakIsSet(true);
    return this;
  }

  public void unsetMinParamBreak() {
    __isset_bit_vector.clear(__MINPARAMBREAK_ISSET_ID);
  }

  /** Returns true if field minParamBreak is set (has been assigned a value) and false otherwise */
  public boolean isSetMinParamBreak() {
    return __isset_bit_vector.get(__MINPARAMBREAK_ISSET_ID);
  }

  public void setMinParamBreakIsSet(boolean value) {
    __isset_bit_vector.set(__MINPARAMBREAK_ISSET_ID, value);
  }

  public double getMaxParamBreak() {
    return this.maxParamBreak;
  }

  public NeighborValue setMaxParamBreak(double maxParamBreak) {
    this.maxParamBreak = maxParamBreak;
    setMaxParamBreakIsSet(true);
    return this;
  }

  public void unsetMaxParamBreak() {
    __isset_bit_vector.clear(__MAXPARAMBREAK_ISSET_ID);
  }

  /** Returns true if field maxParamBreak is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxParamBreak() {
    return __isset_bit_vector.get(__MAXPARAMBREAK_ISSET_ID);
  }

  public void setMaxParamBreakIsSet(boolean value) {
    __isset_bit_vector.set(__MAXPARAMBREAK_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FIRE_VALUE:
      if (value == null) {
        unsetFireValue();
      } else {
        setFireValue((FireValue)value);
      }
      break;

    case NUM_NEIGHBORS:
      if (value == null) {
        unsetNumNeighbors();
      } else {
        setNumNeighbors((Integer)value);
      }
      break;

    case AVG_SHORT_DROP:
      if (value == null) {
        unsetAvgShortDrop();
      } else {
        setAvgShortDrop((Double)value);
      }
      break;

    case MIN_SHORT_DROP:
      if (value == null) {
        unsetMinShortDrop();
      } else {
        setMinShortDrop((Double)value);
      }
      break;

    case AVG_LONG_DROP:
      if (value == null) {
        unsetAvgLongDrop();
      } else {
        setAvgLongDrop((Double)value);
      }
      break;

    case MIN_LONG_DROP:
      if (value == null) {
        unsetMinLongDrop();
      } else {
        setMinLongDrop((Double)value);
      }
      break;

    case AVG_TSTAT:
      if (value == null) {
        unsetAvgTStat();
      } else {
        setAvgTStat((Double)value);
      }
      break;

    case MIN_TSTAT:
      if (value == null) {
        unsetMinTStat();
      } else {
        setMinTStat((Double)value);
      }
      break;

    case AVG_PARAM_BREAK:
      if (value == null) {
        unsetAvgParamBreak();
      } else {
        setAvgParamBreak((Double)value);
      }
      break;

    case MIN_PARAM_BREAK:
      if (value == null) {
        unsetMinParamBreak();
      } else {
        setMinParamBreak((Double)value);
      }
      break;

    case MAX_PARAM_BREAK:
      if (value == null) {
        unsetMaxParamBreak();
      } else {
        setMaxParamBreak((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FIRE_VALUE:
      return getFireValue();

    case NUM_NEIGHBORS:
      return Integer.valueOf(getNumNeighbors());

    case AVG_SHORT_DROP:
      return Double.valueOf(getAvgShortDrop());

    case MIN_SHORT_DROP:
      return Double.valueOf(getMinShortDrop());

    case AVG_LONG_DROP:
      return Double.valueOf(getAvgLongDrop());

    case MIN_LONG_DROP:
      return Double.valueOf(getMinLongDrop());

    case AVG_TSTAT:
      return Double.valueOf(getAvgTStat());

    case MIN_TSTAT:
      return Double.valueOf(getMinTStat());

    case AVG_PARAM_BREAK:
      return Double.valueOf(getAvgParamBreak());

    case MIN_PARAM_BREAK:
      return Double.valueOf(getMinParamBreak());

    case MAX_PARAM_BREAK:
      return Double.valueOf(getMaxParamBreak());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FIRE_VALUE:
      return isSetFireValue();
    case NUM_NEIGHBORS:
      return isSetNumNeighbors();
    case AVG_SHORT_DROP:
      return isSetAvgShortDrop();
    case MIN_SHORT_DROP:
      return isSetMinShortDrop();
    case AVG_LONG_DROP:
      return isSetAvgLongDrop();
    case MIN_LONG_DROP:
      return isSetMinLongDrop();
    case AVG_TSTAT:
      return isSetAvgTStat();
    case MIN_TSTAT:
      return isSetMinTStat();
    case AVG_PARAM_BREAK:
      return isSetAvgParamBreak();
    case MIN_PARAM_BREAK:
      return isSetMinParamBreak();
    case MAX_PARAM_BREAK:
      return isSetMaxParamBreak();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NeighborValue)
      return this.equals((NeighborValue)that);
    return false;
  }

  public boolean equals(NeighborValue that) {
    if (that == null)
      return false;

    boolean this_present_fireValue = true && this.isSetFireValue();
    boolean that_present_fireValue = true && that.isSetFireValue();
    if (this_present_fireValue || that_present_fireValue) {
      if (!(this_present_fireValue && that_present_fireValue))
        return false;
      if (!this.fireValue.equals(that.fireValue))
        return false;
    }

    boolean this_present_numNeighbors = true;
    boolean that_present_numNeighbors = true;
    if (this_present_numNeighbors || that_present_numNeighbors) {
      if (!(this_present_numNeighbors && that_present_numNeighbors))
        return false;
      if (this.numNeighbors != that.numNeighbors)
        return false;
    }

    boolean this_present_avgShortDrop = true;
    boolean that_present_avgShortDrop = true;
    if (this_present_avgShortDrop || that_present_avgShortDrop) {
      if (!(this_present_avgShortDrop && that_present_avgShortDrop))
        return false;
      if (this.avgShortDrop != that.avgShortDrop)
        return false;
    }

    boolean this_present_minShortDrop = true;
    boolean that_present_minShortDrop = true;
    if (this_present_minShortDrop || that_present_minShortDrop) {
      if (!(this_present_minShortDrop && that_present_minShortDrop))
        return false;
      if (this.minShortDrop != that.minShortDrop)
        return false;
    }

    boolean this_present_avgLongDrop = true;
    boolean that_present_avgLongDrop = true;
    if (this_present_avgLongDrop || that_present_avgLongDrop) {
      if (!(this_present_avgLongDrop && that_present_avgLongDrop))
        return false;
      if (this.avgLongDrop != that.avgLongDrop)
        return false;
    }

    boolean this_present_minLongDrop = true;
    boolean that_present_minLongDrop = true;
    if (this_present_minLongDrop || that_present_minLongDrop) {
      if (!(this_present_minLongDrop && that_present_minLongDrop))
        return false;
      if (this.minLongDrop != that.minLongDrop)
        return false;
    }

    boolean this_present_avgTStat = true;
    boolean that_present_avgTStat = true;
    if (this_present_avgTStat || that_present_avgTStat) {
      if (!(this_present_avgTStat && that_present_avgTStat))
        return false;
      if (this.avgTStat != that.avgTStat)
        return false;
    }

    boolean this_present_minTStat = true;
    boolean that_present_minTStat = true;
    if (this_present_minTStat || that_present_minTStat) {
      if (!(this_present_minTStat && that_present_minTStat))
        return false;
      if (this.minTStat != that.minTStat)
        return false;
    }

    boolean this_present_avgParamBreak = true && this.isSetAvgParamBreak();
    boolean that_present_avgParamBreak = true && that.isSetAvgParamBreak();
    if (this_present_avgParamBreak || that_present_avgParamBreak) {
      if (!(this_present_avgParamBreak && that_present_avgParamBreak))
        return false;
      if (this.avgParamBreak != that.avgParamBreak)
        return false;
    }

    boolean this_present_minParamBreak = true && this.isSetMinParamBreak();
    boolean that_present_minParamBreak = true && that.isSetMinParamBreak();
    if (this_present_minParamBreak || that_present_minParamBreak) {
      if (!(this_present_minParamBreak && that_present_minParamBreak))
        return false;
      if (this.minParamBreak != that.minParamBreak)
        return false;
    }

    boolean this_present_maxParamBreak = true && this.isSetMaxParamBreak();
    boolean that_present_maxParamBreak = true && that.isSetMaxParamBreak();
    if (this_present_maxParamBreak || that_present_maxParamBreak) {
      if (!(this_present_maxParamBreak && that_present_maxParamBreak))
        return false;
      if (this.maxParamBreak != that.maxParamBreak)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_fireValue = true && (isSetFireValue());
    builder.append(present_fireValue);
    if (present_fireValue)
      builder.append(fireValue);

    boolean present_numNeighbors = true;
    builder.append(present_numNeighbors);
    if (present_numNeighbors)
      builder.append(numNeighbors);

    boolean present_avgShortDrop = true;
    builder.append(present_avgShortDrop);
    if (present_avgShortDrop)
      builder.append(avgShortDrop);

    boolean present_minShortDrop = true;
    builder.append(present_minShortDrop);
    if (present_minShortDrop)
      builder.append(minShortDrop);

    boolean present_avgLongDrop = true;
    builder.append(present_avgLongDrop);
    if (present_avgLongDrop)
      builder.append(avgLongDrop);

    boolean present_minLongDrop = true;
    builder.append(present_minLongDrop);
    if (present_minLongDrop)
      builder.append(minLongDrop);

    boolean present_avgTStat = true;
    builder.append(present_avgTStat);
    if (present_avgTStat)
      builder.append(avgTStat);

    boolean present_minTStat = true;
    builder.append(present_minTStat);
    if (present_minTStat)
      builder.append(minTStat);

    boolean present_avgParamBreak = true && (isSetAvgParamBreak());
    builder.append(present_avgParamBreak);
    if (present_avgParamBreak)
      builder.append(avgParamBreak);

    boolean present_minParamBreak = true && (isSetMinParamBreak());
    builder.append(present_minParamBreak);
    if (present_minParamBreak)
      builder.append(minParamBreak);

    boolean present_maxParamBreak = true && (isSetMaxParamBreak());
    builder.append(present_maxParamBreak);
    if (present_maxParamBreak)
      builder.append(maxParamBreak);

    return builder.toHashCode();
  }

  public int compareTo(NeighborValue other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    NeighborValue typedOther = (NeighborValue)other;

    lastComparison = Boolean.valueOf(isSetFireValue()).compareTo(typedOther.isSetFireValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFireValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fireValue, typedOther.fireValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumNeighbors()).compareTo(typedOther.isSetNumNeighbors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumNeighbors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numNeighbors, typedOther.numNeighbors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvgShortDrop()).compareTo(typedOther.isSetAvgShortDrop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvgShortDrop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avgShortDrop, typedOther.avgShortDrop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinShortDrop()).compareTo(typedOther.isSetMinShortDrop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinShortDrop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minShortDrop, typedOther.minShortDrop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvgLongDrop()).compareTo(typedOther.isSetAvgLongDrop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvgLongDrop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avgLongDrop, typedOther.avgLongDrop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinLongDrop()).compareTo(typedOther.isSetMinLongDrop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinLongDrop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minLongDrop, typedOther.minLongDrop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvgTStat()).compareTo(typedOther.isSetAvgTStat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvgTStat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avgTStat, typedOther.avgTStat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinTStat()).compareTo(typedOther.isSetMinTStat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinTStat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minTStat, typedOther.minTStat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvgParamBreak()).compareTo(typedOther.isSetAvgParamBreak());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvgParamBreak()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avgParamBreak, typedOther.avgParamBreak);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinParamBreak()).compareTo(typedOther.isSetMinParamBreak());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinParamBreak()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minParamBreak, typedOther.minParamBreak);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxParamBreak()).compareTo(typedOther.isSetMaxParamBreak());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxParamBreak()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxParamBreak, typedOther.maxParamBreak);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("NeighborValue(");
    boolean first = true;

    sb.append("fireValue:");
    if (this.fireValue == null) {
      sb.append("null");
    } else {
      sb.append(this.fireValue);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("numNeighbors:");
    sb.append(this.numNeighbors);
    first = false;
    if (!first) sb.append(", ");
    sb.append("avgShortDrop:");
    sb.append(this.avgShortDrop);
    first = false;
    if (!first) sb.append(", ");
    sb.append("minShortDrop:");
    sb.append(this.minShortDrop);
    first = false;
    if (!first) sb.append(", ");
    sb.append("avgLongDrop:");
    sb.append(this.avgLongDrop);
    first = false;
    if (!first) sb.append(", ");
    sb.append("minLongDrop:");
    sb.append(this.minLongDrop);
    first = false;
    if (!first) sb.append(", ");
    sb.append("avgTStat:");
    sb.append(this.avgTStat);
    first = false;
    if (!first) sb.append(", ");
    sb.append("minTStat:");
    sb.append(this.minTStat);
    first = false;
    if (isSetAvgParamBreak()) {
      if (!first) sb.append(", ");
      sb.append("avgParamBreak:");
      sb.append(this.avgParamBreak);
      first = false;
    }
    if (isSetMinParamBreak()) {
      if (!first) sb.append(", ");
      sb.append("minParamBreak:");
      sb.append(this.minParamBreak);
      first = false;
    }
    if (isSetMaxParamBreak()) {
      if (!first) sb.append(", ");
      sb.append("maxParamBreak:");
      sb.append(this.maxParamBreak);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NeighborValueStandardSchemeFactory implements SchemeFactory {
    public NeighborValueStandardScheme getScheme() {
      return new NeighborValueStandardScheme();
    }
  }

  private static class NeighborValueStandardScheme extends StandardScheme<NeighborValue> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NeighborValue struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FIRE_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fireValue = new FireValue();
              struct.fireValue.read(iprot);
              struct.setFireValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NUM_NEIGHBORS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numNeighbors = iprot.readI32();
              struct.setNumNeighborsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AVG_SHORT_DROP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.avgShortDrop = iprot.readDouble();
              struct.setAvgShortDropIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MIN_SHORT_DROP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.minShortDrop = iprot.readDouble();
              struct.setMinShortDropIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AVG_LONG_DROP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.avgLongDrop = iprot.readDouble();
              struct.setAvgLongDropIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MIN_LONG_DROP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.minLongDrop = iprot.readDouble();
              struct.setMinLongDropIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // AVG_TSTAT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.avgTStat = iprot.readDouble();
              struct.setAvgTStatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MIN_TSTAT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.minTStat = iprot.readDouble();
              struct.setMinTStatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // AVG_PARAM_BREAK
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.avgParamBreak = iprot.readDouble();
              struct.setAvgParamBreakIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MIN_PARAM_BREAK
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.minParamBreak = iprot.readDouble();
              struct.setMinParamBreakIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MAX_PARAM_BREAK
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.maxParamBreak = iprot.readDouble();
              struct.setMaxParamBreakIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NeighborValue struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fireValue != null) {
        oprot.writeFieldBegin(FIRE_VALUE_FIELD_DESC);
        struct.fireValue.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NUM_NEIGHBORS_FIELD_DESC);
      oprot.writeI32(struct.numNeighbors);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AVG_SHORT_DROP_FIELD_DESC);
      oprot.writeDouble(struct.avgShortDrop);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_SHORT_DROP_FIELD_DESC);
      oprot.writeDouble(struct.minShortDrop);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AVG_LONG_DROP_FIELD_DESC);
      oprot.writeDouble(struct.avgLongDrop);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_LONG_DROP_FIELD_DESC);
      oprot.writeDouble(struct.minLongDrop);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AVG_TSTAT_FIELD_DESC);
      oprot.writeDouble(struct.avgTStat);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_TSTAT_FIELD_DESC);
      oprot.writeDouble(struct.minTStat);
      oprot.writeFieldEnd();
      if (struct.isSetAvgParamBreak()) {
        oprot.writeFieldBegin(AVG_PARAM_BREAK_FIELD_DESC);
        oprot.writeDouble(struct.avgParamBreak);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMinParamBreak()) {
        oprot.writeFieldBegin(MIN_PARAM_BREAK_FIELD_DESC);
        oprot.writeDouble(struct.minParamBreak);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaxParamBreak()) {
        oprot.writeFieldBegin(MAX_PARAM_BREAK_FIELD_DESC);
        oprot.writeDouble(struct.maxParamBreak);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NeighborValueTupleSchemeFactory implements SchemeFactory {
    public NeighborValueTupleScheme getScheme() {
      return new NeighborValueTupleScheme();
    }
  }

  private static class NeighborValueTupleScheme extends TupleScheme<NeighborValue> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NeighborValue struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFireValue()) {
        optionals.set(0);
      }
      if (struct.isSetNumNeighbors()) {
        optionals.set(1);
      }
      if (struct.isSetAvgShortDrop()) {
        optionals.set(2);
      }
      if (struct.isSetMinShortDrop()) {
        optionals.set(3);
      }
      if (struct.isSetAvgLongDrop()) {
        optionals.set(4);
      }
      if (struct.isSetMinLongDrop()) {
        optionals.set(5);
      }
      if (struct.isSetAvgTStat()) {
        optionals.set(6);
      }
      if (struct.isSetMinTStat()) {
        optionals.set(7);
      }
      if (struct.isSetAvgParamBreak()) {
        optionals.set(8);
      }
      if (struct.isSetMinParamBreak()) {
        optionals.set(9);
      }
      if (struct.isSetMaxParamBreak()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetFireValue()) {
        struct.fireValue.write(oprot);
      }
      if (struct.isSetNumNeighbors()) {
        oprot.writeI32(struct.numNeighbors);
      }
      if (struct.isSetAvgShortDrop()) {
        oprot.writeDouble(struct.avgShortDrop);
      }
      if (struct.isSetMinShortDrop()) {
        oprot.writeDouble(struct.minShortDrop);
      }
      if (struct.isSetAvgLongDrop()) {
        oprot.writeDouble(struct.avgLongDrop);
      }
      if (struct.isSetMinLongDrop()) {
        oprot.writeDouble(struct.minLongDrop);
      }
      if (struct.isSetAvgTStat()) {
        oprot.writeDouble(struct.avgTStat);
      }
      if (struct.isSetMinTStat()) {
        oprot.writeDouble(struct.minTStat);
      }
      if (struct.isSetAvgParamBreak()) {
        oprot.writeDouble(struct.avgParamBreak);
      }
      if (struct.isSetMinParamBreak()) {
        oprot.writeDouble(struct.minParamBreak);
      }
      if (struct.isSetMaxParamBreak()) {
        oprot.writeDouble(struct.maxParamBreak);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NeighborValue struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.fireValue = new FireValue();
        struct.fireValue.read(iprot);
        struct.setFireValueIsSet(true);
      }
      if (incoming.get(1)) {
        struct.numNeighbors = iprot.readI32();
        struct.setNumNeighborsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.avgShortDrop = iprot.readDouble();
        struct.setAvgShortDropIsSet(true);
      }
      if (incoming.get(3)) {
        struct.minShortDrop = iprot.readDouble();
        struct.setMinShortDropIsSet(true);
      }
      if (incoming.get(4)) {
        struct.avgLongDrop = iprot.readDouble();
        struct.setAvgLongDropIsSet(true);
      }
      if (incoming.get(5)) {
        struct.minLongDrop = iprot.readDouble();
        struct.setMinLongDropIsSet(true);
      }
      if (incoming.get(6)) {
        struct.avgTStat = iprot.readDouble();
        struct.setAvgTStatIsSet(true);
      }
      if (incoming.get(7)) {
        struct.minTStat = iprot.readDouble();
        struct.setMinTStatIsSet(true);
      }
      if (incoming.get(8)) {
        struct.avgParamBreak = iprot.readDouble();
        struct.setAvgParamBreakIsSet(true);
      }
      if (incoming.get(9)) {
        struct.minParamBreak = iprot.readDouble();
        struct.setMinParamBreakIsSet(true);
      }
      if (incoming.get(10)) {
        struct.maxParamBreak = iprot.readDouble();
        struct.setMaxParamBreakIsSet(true);
      }
    }
  }

}

