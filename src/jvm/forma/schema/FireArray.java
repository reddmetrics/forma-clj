/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package forma.schema;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FireArray implements org.apache.thrift.TBase<FireArray, FireArray._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FireArray");

  private static final org.apache.thrift.protocol.TField FIRES_FIELD_DESC = new org.apache.thrift.protocol.TField("fires", org.apache.thrift.protocol.TType.LIST, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FireArrayStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FireArrayTupleSchemeFactory());
  }

  public List<FireValue> fires; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FIRES((short)1, "fires");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FIRES
          return FIRES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIRES, new org.apache.thrift.meta_data.FieldMetaData("fires", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FireValue.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FireArray.class, metaDataMap);
  }

  public FireArray() {
  }

  public FireArray(
    List<FireValue> fires)
  {
    this();
    this.fires = fires;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FireArray(FireArray other) {
    if (other.isSetFires()) {
      List<FireValue> __this__fires = new ArrayList<FireValue>();
      for (FireValue other_element : other.fires) {
        __this__fires.add(new FireValue(other_element));
      }
      this.fires = __this__fires;
    }
  }

  public FireArray deepCopy() {
    return new FireArray(this);
  }

  @Override
  public void clear() {
    this.fires = null;
  }

  public int getFiresSize() {
    return (this.fires == null) ? 0 : this.fires.size();
  }

  public java.util.Iterator<FireValue> getFiresIterator() {
    return (this.fires == null) ? null : this.fires.iterator();
  }

  public void addToFires(FireValue elem) {
    if (this.fires == null) {
      this.fires = new ArrayList<FireValue>();
    }
    this.fires.add(elem);
  }

  public List<FireValue> getFires() {
    return this.fires;
  }

  public FireArray setFires(List<FireValue> fires) {
    this.fires = fires;
    return this;
  }

  public void unsetFires() {
    this.fires = null;
  }

  /** Returns true if field fires is set (has been assigned a value) and false otherwise */
  public boolean isSetFires() {
    return this.fires != null;
  }

  public void setFiresIsSet(boolean value) {
    if (!value) {
      this.fires = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FIRES:
      if (value == null) {
        unsetFires();
      } else {
        setFires((List<FireValue>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FIRES:
      return getFires();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FIRES:
      return isSetFires();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FireArray)
      return this.equals((FireArray)that);
    return false;
  }

  public boolean equals(FireArray that) {
    if (that == null)
      return false;

    boolean this_present_fires = true && this.isSetFires();
    boolean that_present_fires = true && that.isSetFires();
    if (this_present_fires || that_present_fires) {
      if (!(this_present_fires && that_present_fires))
        return false;
      if (!this.fires.equals(that.fires))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_fires = true && (isSetFires());
    builder.append(present_fires);
    if (present_fires)
      builder.append(fires);

    return builder.toHashCode();
  }

  public int compareTo(FireArray other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    FireArray typedOther = (FireArray)other;

    lastComparison = Boolean.valueOf(isSetFires()).compareTo(typedOther.isSetFires());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFires()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fires, typedOther.fires);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FireArray(");
    boolean first = true;

    sb.append("fires:");
    if (this.fires == null) {
      sb.append("null");
    } else {
      sb.append(this.fires);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FireArrayStandardSchemeFactory implements SchemeFactory {
    public FireArrayStandardScheme getScheme() {
      return new FireArrayStandardScheme();
    }
  }

  private static class FireArrayStandardScheme extends StandardScheme<FireArray> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FireArray struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FIRES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.fires = new ArrayList<FireValue>(_list32.size);
                for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                {
                  FireValue _elem34; // required
                  _elem34 = new FireValue();
                  _elem34.read(iprot);
                  struct.fires.add(_elem34);
                }
                iprot.readListEnd();
              }
              struct.setFiresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FireArray struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fires != null) {
        oprot.writeFieldBegin(FIRES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.fires.size()));
          for (FireValue _iter35 : struct.fires)
          {
            _iter35.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FireArrayTupleSchemeFactory implements SchemeFactory {
    public FireArrayTupleScheme getScheme() {
      return new FireArrayTupleScheme();
    }
  }

  private static class FireArrayTupleScheme extends TupleScheme<FireArray> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FireArray struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFires()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetFires()) {
        {
          oprot.writeI32(struct.fires.size());
          for (FireValue _iter36 : struct.fires)
          {
            _iter36.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FireArray struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.fires = new ArrayList<FireValue>(_list37.size);
          for (int _i38 = 0; _i38 < _list37.size; ++_i38)
          {
            FireValue _elem39; // required
            _elem39 = new FireValue();
            _elem39.read(iprot);
            struct.fires.add(_elem39);
          }
        }
        struct.setFiresIsSet(true);
      }
    }
  }

}

