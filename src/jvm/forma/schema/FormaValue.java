/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package forma.schema;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FormaValue implements org.apache.thrift.TBase<FormaValue, FormaValue._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FormaValue");

  private static final org.apache.thrift.protocol.TField FIRE_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("fireValue", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField SHORT_DROP_FIELD_DESC = new org.apache.thrift.protocol.TField("shortDrop", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField LONG_DROP_FIELD_DESC = new org.apache.thrift.protocol.TField("longDrop", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField T_STAT_FIELD_DESC = new org.apache.thrift.protocol.TField("tStat", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField PARAM_BREAK_FIELD_DESC = new org.apache.thrift.protocol.TField("paramBreak", org.apache.thrift.protocol.TType.DOUBLE, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FormaValueStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FormaValueTupleSchemeFactory());
  }

  public FireValue fireValue; // required
  public double shortDrop; // required
  public double longDrop; // required
  public double tStat; // required
  public double paramBreak; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FIRE_VALUE((short)1, "fireValue"),
    SHORT_DROP((short)2, "shortDrop"),
    LONG_DROP((short)3, "longDrop"),
    T_STAT((short)4, "tStat"),
    PARAM_BREAK((short)5, "paramBreak");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FIRE_VALUE
          return FIRE_VALUE;
        case 2: // SHORT_DROP
          return SHORT_DROP;
        case 3: // LONG_DROP
          return LONG_DROP;
        case 4: // T_STAT
          return T_STAT;
        case 5: // PARAM_BREAK
          return PARAM_BREAK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SHORTDROP_ISSET_ID = 0;
  private static final int __LONGDROP_ISSET_ID = 1;
  private static final int __TSTAT_ISSET_ID = 2;
  private static final int __PARAMBREAK_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIRE_VALUE, new org.apache.thrift.meta_data.FieldMetaData("fireValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FireValue.class)));
    tmpMap.put(_Fields.SHORT_DROP, new org.apache.thrift.meta_data.FieldMetaData("shortDrop", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LONG_DROP, new org.apache.thrift.meta_data.FieldMetaData("longDrop", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.T_STAT, new org.apache.thrift.meta_data.FieldMetaData("tStat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PARAM_BREAK, new org.apache.thrift.meta_data.FieldMetaData("paramBreak", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FormaValue.class, metaDataMap);
  }

  public FormaValue() {
  }

  public FormaValue(
    FireValue fireValue,
    double shortDrop,
    double longDrop,
    double tStat,
    double paramBreak)
  {
    this();
    this.fireValue = fireValue;
    this.shortDrop = shortDrop;
    setShortDropIsSet(true);
    this.longDrop = longDrop;
    setLongDropIsSet(true);
    this.tStat = tStat;
    setTStatIsSet(true);
    this.paramBreak = paramBreak;
    setParamBreakIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FormaValue(FormaValue other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetFireValue()) {
      this.fireValue = new FireValue(other.fireValue);
    }
    this.shortDrop = other.shortDrop;
    this.longDrop = other.longDrop;
    this.tStat = other.tStat;
    this.paramBreak = other.paramBreak;
  }

  public FormaValue deepCopy() {
    return new FormaValue(this);
  }

  @Override
  public void clear() {
    this.fireValue = null;
    setShortDropIsSet(false);
    this.shortDrop = 0.0;
    setLongDropIsSet(false);
    this.longDrop = 0.0;
    setTStatIsSet(false);
    this.tStat = 0.0;
    setParamBreakIsSet(false);
    this.paramBreak = 0.0;
  }

  public FireValue getFireValue() {
    return this.fireValue;
  }

  public FormaValue setFireValue(FireValue fireValue) {
    this.fireValue = fireValue;
    return this;
  }

  public void unsetFireValue() {
    this.fireValue = null;
  }

  /** Returns true if field fireValue is set (has been assigned a value) and false otherwise */
  public boolean isSetFireValue() {
    return this.fireValue != null;
  }

  public void setFireValueIsSet(boolean value) {
    if (!value) {
      this.fireValue = null;
    }
  }

  public double getShortDrop() {
    return this.shortDrop;
  }

  public FormaValue setShortDrop(double shortDrop) {
    this.shortDrop = shortDrop;
    setShortDropIsSet(true);
    return this;
  }

  public void unsetShortDrop() {
    __isset_bit_vector.clear(__SHORTDROP_ISSET_ID);
  }

  /** Returns true if field shortDrop is set (has been assigned a value) and false otherwise */
  public boolean isSetShortDrop() {
    return __isset_bit_vector.get(__SHORTDROP_ISSET_ID);
  }

  public void setShortDropIsSet(boolean value) {
    __isset_bit_vector.set(__SHORTDROP_ISSET_ID, value);
  }

  public double getLongDrop() {
    return this.longDrop;
  }

  public FormaValue setLongDrop(double longDrop) {
    this.longDrop = longDrop;
    setLongDropIsSet(true);
    return this;
  }

  public void unsetLongDrop() {
    __isset_bit_vector.clear(__LONGDROP_ISSET_ID);
  }

  /** Returns true if field longDrop is set (has been assigned a value) and false otherwise */
  public boolean isSetLongDrop() {
    return __isset_bit_vector.get(__LONGDROP_ISSET_ID);
  }

  public void setLongDropIsSet(boolean value) {
    __isset_bit_vector.set(__LONGDROP_ISSET_ID, value);
  }

  public double getTStat() {
    return this.tStat;
  }

  public FormaValue setTStat(double tStat) {
    this.tStat = tStat;
    setTStatIsSet(true);
    return this;
  }

  public void unsetTStat() {
    __isset_bit_vector.clear(__TSTAT_ISSET_ID);
  }

  /** Returns true if field tStat is set (has been assigned a value) and false otherwise */
  public boolean isSetTStat() {
    return __isset_bit_vector.get(__TSTAT_ISSET_ID);
  }

  public void setTStatIsSet(boolean value) {
    __isset_bit_vector.set(__TSTAT_ISSET_ID, value);
  }

  public double getParamBreak() {
    return this.paramBreak;
  }

  public FormaValue setParamBreak(double paramBreak) {
    this.paramBreak = paramBreak;
    setParamBreakIsSet(true);
    return this;
  }

  public void unsetParamBreak() {
    __isset_bit_vector.clear(__PARAMBREAK_ISSET_ID);
  }

  /** Returns true if field paramBreak is set (has been assigned a value) and false otherwise */
  public boolean isSetParamBreak() {
    return __isset_bit_vector.get(__PARAMBREAK_ISSET_ID);
  }

  public void setParamBreakIsSet(boolean value) {
    __isset_bit_vector.set(__PARAMBREAK_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FIRE_VALUE:
      if (value == null) {
        unsetFireValue();
      } else {
        setFireValue((FireValue)value);
      }
      break;

    case SHORT_DROP:
      if (value == null) {
        unsetShortDrop();
      } else {
        setShortDrop((Double)value);
      }
      break;

    case LONG_DROP:
      if (value == null) {
        unsetLongDrop();
      } else {
        setLongDrop((Double)value);
      }
      break;

    case T_STAT:
      if (value == null) {
        unsetTStat();
      } else {
        setTStat((Double)value);
      }
      break;

    case PARAM_BREAK:
      if (value == null) {
        unsetParamBreak();
      } else {
        setParamBreak((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FIRE_VALUE:
      return getFireValue();

    case SHORT_DROP:
      return Double.valueOf(getShortDrop());

    case LONG_DROP:
      return Double.valueOf(getLongDrop());

    case T_STAT:
      return Double.valueOf(getTStat());

    case PARAM_BREAK:
      return Double.valueOf(getParamBreak());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FIRE_VALUE:
      return isSetFireValue();
    case SHORT_DROP:
      return isSetShortDrop();
    case LONG_DROP:
      return isSetLongDrop();
    case T_STAT:
      return isSetTStat();
    case PARAM_BREAK:
      return isSetParamBreak();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FormaValue)
      return this.equals((FormaValue)that);
    return false;
  }

  public boolean equals(FormaValue that) {
    if (that == null)
      return false;

    boolean this_present_fireValue = true && this.isSetFireValue();
    boolean that_present_fireValue = true && that.isSetFireValue();
    if (this_present_fireValue || that_present_fireValue) {
      if (!(this_present_fireValue && that_present_fireValue))
        return false;
      if (!this.fireValue.equals(that.fireValue))
        return false;
    }

    boolean this_present_shortDrop = true;
    boolean that_present_shortDrop = true;
    if (this_present_shortDrop || that_present_shortDrop) {
      if (!(this_present_shortDrop && that_present_shortDrop))
        return false;
      if (this.shortDrop != that.shortDrop)
        return false;
    }

    boolean this_present_longDrop = true;
    boolean that_present_longDrop = true;
    if (this_present_longDrop || that_present_longDrop) {
      if (!(this_present_longDrop && that_present_longDrop))
        return false;
      if (this.longDrop != that.longDrop)
        return false;
    }

    boolean this_present_tStat = true;
    boolean that_present_tStat = true;
    if (this_present_tStat || that_present_tStat) {
      if (!(this_present_tStat && that_present_tStat))
        return false;
      if (this.tStat != that.tStat)
        return false;
    }

    boolean this_present_paramBreak = true;
    boolean that_present_paramBreak = true;
    if (this_present_paramBreak || that_present_paramBreak) {
      if (!(this_present_paramBreak && that_present_paramBreak))
        return false;
      if (this.paramBreak != that.paramBreak)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_fireValue = true && (isSetFireValue());
    builder.append(present_fireValue);
    if (present_fireValue)
      builder.append(fireValue);

    boolean present_shortDrop = true;
    builder.append(present_shortDrop);
    if (present_shortDrop)
      builder.append(shortDrop);

    boolean present_longDrop = true;
    builder.append(present_longDrop);
    if (present_longDrop)
      builder.append(longDrop);

    boolean present_tStat = true;
    builder.append(present_tStat);
    if (present_tStat)
      builder.append(tStat);

    boolean present_paramBreak = true;
    builder.append(present_paramBreak);
    if (present_paramBreak)
      builder.append(paramBreak);

    return builder.toHashCode();
  }

  public int compareTo(FormaValue other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    FormaValue typedOther = (FormaValue)other;

    lastComparison = Boolean.valueOf(isSetFireValue()).compareTo(typedOther.isSetFireValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFireValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fireValue, typedOther.fireValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShortDrop()).compareTo(typedOther.isSetShortDrop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortDrop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shortDrop, typedOther.shortDrop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongDrop()).compareTo(typedOther.isSetLongDrop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongDrop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longDrop, typedOther.longDrop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTStat()).compareTo(typedOther.isSetTStat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTStat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tStat, typedOther.tStat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParamBreak()).compareTo(typedOther.isSetParamBreak());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParamBreak()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramBreak, typedOther.paramBreak);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FormaValue(");
    boolean first = true;

    sb.append("fireValue:");
    if (this.fireValue == null) {
      sb.append("null");
    } else {
      sb.append(this.fireValue);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shortDrop:");
    sb.append(this.shortDrop);
    first = false;
    if (!first) sb.append(", ");
    sb.append("longDrop:");
    sb.append(this.longDrop);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tStat:");
    sb.append(this.tStat);
    first = false;
    if (!first) sb.append(", ");
    sb.append("paramBreak:");
    sb.append(this.paramBreak);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FormaValueStandardSchemeFactory implements SchemeFactory {
    public FormaValueStandardScheme getScheme() {
      return new FormaValueStandardScheme();
    }
  }

  private static class FormaValueStandardScheme extends StandardScheme<FormaValue> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FormaValue struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FIRE_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fireValue = new FireValue();
              struct.fireValue.read(iprot);
              struct.setFireValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SHORT_DROP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shortDrop = iprot.readDouble();
              struct.setShortDropIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LONG_DROP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.longDrop = iprot.readDouble();
              struct.setLongDropIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // T_STAT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.tStat = iprot.readDouble();
              struct.setTStatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PARAM_BREAK
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.paramBreak = iprot.readDouble();
              struct.setParamBreakIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FormaValue struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fireValue != null) {
        oprot.writeFieldBegin(FIRE_VALUE_FIELD_DESC);
        struct.fireValue.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SHORT_DROP_FIELD_DESC);
      oprot.writeDouble(struct.shortDrop);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LONG_DROP_FIELD_DESC);
      oprot.writeDouble(struct.longDrop);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(T_STAT_FIELD_DESC);
      oprot.writeDouble(struct.tStat);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PARAM_BREAK_FIELD_DESC);
      oprot.writeDouble(struct.paramBreak);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FormaValueTupleSchemeFactory implements SchemeFactory {
    public FormaValueTupleScheme getScheme() {
      return new FormaValueTupleScheme();
    }
  }

  private static class FormaValueTupleScheme extends TupleScheme<FormaValue> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FormaValue struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFireValue()) {
        optionals.set(0);
      }
      if (struct.isSetShortDrop()) {
        optionals.set(1);
      }
      if (struct.isSetLongDrop()) {
        optionals.set(2);
      }
      if (struct.isSetTStat()) {
        optionals.set(3);
      }
      if (struct.isSetParamBreak()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetFireValue()) {
        struct.fireValue.write(oprot);
      }
      if (struct.isSetShortDrop()) {
        oprot.writeDouble(struct.shortDrop);
      }
      if (struct.isSetLongDrop()) {
        oprot.writeDouble(struct.longDrop);
      }
      if (struct.isSetTStat()) {
        oprot.writeDouble(struct.tStat);
      }
      if (struct.isSetParamBreak()) {
        oprot.writeDouble(struct.paramBreak);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FormaValue struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.fireValue = new FireValue();
        struct.fireValue.read(iprot);
        struct.setFireValueIsSet(true);
      }
      if (incoming.get(1)) {
        struct.shortDrop = iprot.readDouble();
        struct.setShortDropIsSet(true);
      }
      if (incoming.get(2)) {
        struct.longDrop = iprot.readDouble();
        struct.setLongDropIsSet(true);
      }
      if (incoming.get(3)) {
        struct.tStat = iprot.readDouble();
        struct.setTStatIsSet(true);
      }
      if (incoming.get(4)) {
        struct.paramBreak = iprot.readDouble();
        struct.setParamBreakIsSet(true);
      }
    }
  }

}

