/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package forma.schema;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FireSeries implements org.apache.thrift.TBase<FireSeries, FireSeries._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FireSeries");

  private static final org.apache.thrift.protocol.TField START_IDX_FIELD_DESC = new org.apache.thrift.protocol.TField("startIdx", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField END_IDX_FIELD_DESC = new org.apache.thrift.protocol.TField("endIdx", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("values", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FireSeriesStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FireSeriesTupleSchemeFactory());
  }

  public int startIdx; // required
  public int endIdx; // required
  public List<FireTuple> values; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    START_IDX((short)1, "startIdx"),
    END_IDX((short)2, "endIdx"),
    VALUES((short)3, "values");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // START_IDX
          return START_IDX;
        case 2: // END_IDX
          return END_IDX;
        case 3: // VALUES
          return VALUES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STARTIDX_ISSET_ID = 0;
  private static final int __ENDIDX_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.START_IDX, new org.apache.thrift.meta_data.FieldMetaData("startIdx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.END_IDX, new org.apache.thrift.meta_data.FieldMetaData("endIdx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VALUES, new org.apache.thrift.meta_data.FieldMetaData("values", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FireTuple.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FireSeries.class, metaDataMap);
  }

  public FireSeries() {
  }

  public FireSeries(
    int startIdx,
    int endIdx,
    List<FireTuple> values)
  {
    this();
    this.startIdx = startIdx;
    setStartIdxIsSet(true);
    this.endIdx = endIdx;
    setEndIdxIsSet(true);
    this.values = values;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FireSeries(FireSeries other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.startIdx = other.startIdx;
    this.endIdx = other.endIdx;
    if (other.isSetValues()) {
      List<FireTuple> __this__values = new ArrayList<FireTuple>();
      for (FireTuple other_element : other.values) {
        __this__values.add(new FireTuple(other_element));
      }
      this.values = __this__values;
    }
  }

  public FireSeries deepCopy() {
    return new FireSeries(this);
  }

  @Override
  public void clear() {
    setStartIdxIsSet(false);
    this.startIdx = 0;
    setEndIdxIsSet(false);
    this.endIdx = 0;
    this.values = null;
  }

  public int getStartIdx() {
    return this.startIdx;
  }

  public FireSeries setStartIdx(int startIdx) {
    this.startIdx = startIdx;
    setStartIdxIsSet(true);
    return this;
  }

  public void unsetStartIdx() {
    __isset_bit_vector.clear(__STARTIDX_ISSET_ID);
  }

  /** Returns true if field startIdx is set (has been assigned a value) and false otherwise */
  public boolean isSetStartIdx() {
    return __isset_bit_vector.get(__STARTIDX_ISSET_ID);
  }

  public void setStartIdxIsSet(boolean value) {
    __isset_bit_vector.set(__STARTIDX_ISSET_ID, value);
  }

  public int getEndIdx() {
    return this.endIdx;
  }

  public FireSeries setEndIdx(int endIdx) {
    this.endIdx = endIdx;
    setEndIdxIsSet(true);
    return this;
  }

  public void unsetEndIdx() {
    __isset_bit_vector.clear(__ENDIDX_ISSET_ID);
  }

  /** Returns true if field endIdx is set (has been assigned a value) and false otherwise */
  public boolean isSetEndIdx() {
    return __isset_bit_vector.get(__ENDIDX_ISSET_ID);
  }

  public void setEndIdxIsSet(boolean value) {
    __isset_bit_vector.set(__ENDIDX_ISSET_ID, value);
  }

  public int getValuesSize() {
    return (this.values == null) ? 0 : this.values.size();
  }

  public java.util.Iterator<FireTuple> getValuesIterator() {
    return (this.values == null) ? null : this.values.iterator();
  }

  public void addToValues(FireTuple elem) {
    if (this.values == null) {
      this.values = new ArrayList<FireTuple>();
    }
    this.values.add(elem);
  }

  public List<FireTuple> getValues() {
    return this.values;
  }

  public FireSeries setValues(List<FireTuple> values) {
    this.values = values;
    return this;
  }

  public void unsetValues() {
    this.values = null;
  }

  /** Returns true if field values is set (has been assigned a value) and false otherwise */
  public boolean isSetValues() {
    return this.values != null;
  }

  public void setValuesIsSet(boolean value) {
    if (!value) {
      this.values = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case START_IDX:
      if (value == null) {
        unsetStartIdx();
      } else {
        setStartIdx((Integer)value);
      }
      break;

    case END_IDX:
      if (value == null) {
        unsetEndIdx();
      } else {
        setEndIdx((Integer)value);
      }
      break;

    case VALUES:
      if (value == null) {
        unsetValues();
      } else {
        setValues((List<FireTuple>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case START_IDX:
      return Integer.valueOf(getStartIdx());

    case END_IDX:
      return Integer.valueOf(getEndIdx());

    case VALUES:
      return getValues();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case START_IDX:
      return isSetStartIdx();
    case END_IDX:
      return isSetEndIdx();
    case VALUES:
      return isSetValues();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FireSeries)
      return this.equals((FireSeries)that);
    return false;
  }

  public boolean equals(FireSeries that) {
    if (that == null)
      return false;

    boolean this_present_startIdx = true;
    boolean that_present_startIdx = true;
    if (this_present_startIdx || that_present_startIdx) {
      if (!(this_present_startIdx && that_present_startIdx))
        return false;
      if (this.startIdx != that.startIdx)
        return false;
    }

    boolean this_present_endIdx = true;
    boolean that_present_endIdx = true;
    if (this_present_endIdx || that_present_endIdx) {
      if (!(this_present_endIdx && that_present_endIdx))
        return false;
      if (this.endIdx != that.endIdx)
        return false;
    }

    boolean this_present_values = true && this.isSetValues();
    boolean that_present_values = true && that.isSetValues();
    if (this_present_values || that_present_values) {
      if (!(this_present_values && that_present_values))
        return false;
      if (!this.values.equals(that.values))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_startIdx = true;
    builder.append(present_startIdx);
    if (present_startIdx)
      builder.append(startIdx);

    boolean present_endIdx = true;
    builder.append(present_endIdx);
    if (present_endIdx)
      builder.append(endIdx);

    boolean present_values = true && (isSetValues());
    builder.append(present_values);
    if (present_values)
      builder.append(values);

    return builder.toHashCode();
  }

  public int compareTo(FireSeries other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    FireSeries typedOther = (FireSeries)other;

    lastComparison = Boolean.valueOf(isSetStartIdx()).compareTo(typedOther.isSetStartIdx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartIdx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startIdx, typedOther.startIdx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndIdx()).compareTo(typedOther.isSetEndIdx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndIdx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endIdx, typedOther.endIdx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValues()).compareTo(typedOther.isSetValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.values, typedOther.values);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FireSeries(");
    boolean first = true;

    sb.append("startIdx:");
    sb.append(this.startIdx);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endIdx:");
    sb.append(this.endIdx);
    first = false;
    if (!first) sb.append(", ");
    sb.append("values:");
    if (this.values == null) {
      sb.append("null");
    } else {
      sb.append(this.values);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FireSeriesStandardSchemeFactory implements SchemeFactory {
    public FireSeriesStandardScheme getScheme() {
      return new FireSeriesStandardScheme();
    }
  }

  private static class FireSeriesStandardScheme extends StandardScheme<FireSeries> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FireSeries struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // START_IDX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.startIdx = iprot.readI32();
              struct.setStartIdxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // END_IDX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.endIdx = iprot.readI32();
              struct.setEndIdxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.values = new ArrayList<FireTuple>(_list16.size);
                for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                {
                  FireTuple _elem18; // required
                  _elem18 = new FireTuple();
                  _elem18.read(iprot);
                  struct.values.add(_elem18);
                }
                iprot.readListEnd();
              }
              struct.setValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FireSeries struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(START_IDX_FIELD_DESC);
      oprot.writeI32(struct.startIdx);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_IDX_FIELD_DESC);
      oprot.writeI32(struct.endIdx);
      oprot.writeFieldEnd();
      if (struct.values != null) {
        oprot.writeFieldBegin(VALUES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.values.size()));
          for (FireTuple _iter19 : struct.values)
          {
            _iter19.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FireSeriesTupleSchemeFactory implements SchemeFactory {
    public FireSeriesTupleScheme getScheme() {
      return new FireSeriesTupleScheme();
    }
  }

  private static class FireSeriesTupleScheme extends TupleScheme<FireSeries> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FireSeries struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStartIdx()) {
        optionals.set(0);
      }
      if (struct.isSetEndIdx()) {
        optionals.set(1);
      }
      if (struct.isSetValues()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetStartIdx()) {
        oprot.writeI32(struct.startIdx);
      }
      if (struct.isSetEndIdx()) {
        oprot.writeI32(struct.endIdx);
      }
      if (struct.isSetValues()) {
        {
          oprot.writeI32(struct.values.size());
          for (FireTuple _iter20 : struct.values)
          {
            _iter20.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FireSeries struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.startIdx = iprot.readI32();
        struct.setStartIdxIsSet(true);
      }
      if (incoming.get(1)) {
        struct.endIdx = iprot.readI32();
        struct.setEndIdxIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.values = new ArrayList<FireTuple>(_list21.size);
          for (int _i22 = 0; _i22 < _list21.size; ++_i22)
          {
            FireTuple _elem23; // required
            _elem23 = new FireTuple();
            _elem23.read(iprot);
            struct.values.add(_elem23);
          }
        }
        struct.setValuesIsSet(true);
      }
    }
  }

}

