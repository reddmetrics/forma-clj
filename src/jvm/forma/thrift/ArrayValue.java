/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package forma.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ArrayValue extends org.apache.thrift.TUnion<ArrayValue, ArrayValue._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ArrayValue");
  private static final org.apache.thrift.protocol.TField LONGS_FIELD_DESC = new org.apache.thrift.protocol.TField("longs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField DOUBLES_FIELD_DESC = new org.apache.thrift.protocol.TField("doubles", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField SHORTS_FIELD_DESC = new org.apache.thrift.protocol.TField("shorts", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField INTS_FIELD_DESC = new org.apache.thrift.protocol.TField("ints", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField FIRES_FIELD_DESC = new org.apache.thrift.protocol.TField("fires", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField FORMAS_FIELD_DESC = new org.apache.thrift.protocol.TField("formas", org.apache.thrift.protocol.TType.STRUCT, (short)6);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LONGS((short)1, "longs"),
    DOUBLES((short)2, "doubles"),
    SHORTS((short)3, "shorts"),
    INTS((short)4, "ints"),
    FIRES((short)5, "fires"),
    FORMAS((short)6, "formas");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LONGS
          return LONGS;
        case 2: // DOUBLES
          return DOUBLES;
        case 3: // SHORTS
          return SHORTS;
        case 4: // INTS
          return INTS;
        case 5: // FIRES
          return FIRES;
        case 6: // FORMAS
          return FORMAS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LONGS, new org.apache.thrift.meta_data.FieldMetaData("longs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LongArray.class)));
    tmpMap.put(_Fields.DOUBLES, new org.apache.thrift.meta_data.FieldMetaData("doubles", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DoubleArray.class)));
    tmpMap.put(_Fields.SHORTS, new org.apache.thrift.meta_data.FieldMetaData("shorts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ShortArray.class)));
    tmpMap.put(_Fields.INTS, new org.apache.thrift.meta_data.FieldMetaData("ints", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IntArray.class)));
    tmpMap.put(_Fields.FIRES, new org.apache.thrift.meta_data.FieldMetaData("fires", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FireArray.class)));
    tmpMap.put(_Fields.FORMAS, new org.apache.thrift.meta_data.FieldMetaData("formas", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FormaArray.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ArrayValue.class, metaDataMap);
  }

  public ArrayValue() {
    super();
  }

  public ArrayValue(_Fields setField, Object value) {
    super(setField, value);
  }

  public ArrayValue(ArrayValue other) {
    super(other);
  }
  public ArrayValue deepCopy() {
    return new ArrayValue(this);
  }

  public static ArrayValue longs(LongArray value) {
    ArrayValue x = new ArrayValue();
    x.setLongs(value);
    return x;
  }

  public static ArrayValue doubles(DoubleArray value) {
    ArrayValue x = new ArrayValue();
    x.setDoubles(value);
    return x;
  }

  public static ArrayValue shorts(ShortArray value) {
    ArrayValue x = new ArrayValue();
    x.setShorts(value);
    return x;
  }

  public static ArrayValue ints(IntArray value) {
    ArrayValue x = new ArrayValue();
    x.setInts(value);
    return x;
  }

  public static ArrayValue fires(FireArray value) {
    ArrayValue x = new ArrayValue();
    x.setFires(value);
    return x;
  }

  public static ArrayValue formas(FormaArray value) {
    ArrayValue x = new ArrayValue();
    x.setFormas(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case LONGS:
        if (value instanceof LongArray) {
          break;
        }
        throw new ClassCastException("Was expecting value of type LongArray for field 'longs', but got " + value.getClass().getSimpleName());
      case DOUBLES:
        if (value instanceof DoubleArray) {
          break;
        }
        throw new ClassCastException("Was expecting value of type DoubleArray for field 'doubles', but got " + value.getClass().getSimpleName());
      case SHORTS:
        if (value instanceof ShortArray) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ShortArray for field 'shorts', but got " + value.getClass().getSimpleName());
      case INTS:
        if (value instanceof IntArray) {
          break;
        }
        throw new ClassCastException("Was expecting value of type IntArray for field 'ints', but got " + value.getClass().getSimpleName());
      case FIRES:
        if (value instanceof FireArray) {
          break;
        }
        throw new ClassCastException("Was expecting value of type FireArray for field 'fires', but got " + value.getClass().getSimpleName());
      case FORMAS:
        if (value instanceof FormaArray) {
          break;
        }
        throw new ClassCastException("Was expecting value of type FormaArray for field 'formas', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case LONGS:
          if (field.type == LONGS_FIELD_DESC.type) {
            LongArray longs;
            longs = new LongArray();
            longs.read(iprot);
            return longs;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case DOUBLES:
          if (field.type == DOUBLES_FIELD_DESC.type) {
            DoubleArray doubles;
            doubles = new DoubleArray();
            doubles.read(iprot);
            return doubles;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SHORTS:
          if (field.type == SHORTS_FIELD_DESC.type) {
            ShortArray shorts;
            shorts = new ShortArray();
            shorts.read(iprot);
            return shorts;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case INTS:
          if (field.type == INTS_FIELD_DESC.type) {
            IntArray ints;
            ints = new IntArray();
            ints.read(iprot);
            return ints;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case FIRES:
          if (field.type == FIRES_FIELD_DESC.type) {
            FireArray fires;
            fires = new FireArray();
            fires.read(iprot);
            return fires;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case FORMAS:
          if (field.type == FORMAS_FIELD_DESC.type) {
            FormaArray formas;
            formas = new FormaArray();
            formas.read(iprot);
            return formas;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case LONGS:
        LongArray longs = (LongArray)value_;
        longs.write(oprot);
        return;
      case DOUBLES:
        DoubleArray doubles = (DoubleArray)value_;
        doubles.write(oprot);
        return;
      case SHORTS:
        ShortArray shorts = (ShortArray)value_;
        shorts.write(oprot);
        return;
      case INTS:
        IntArray ints = (IntArray)value_;
        ints.write(oprot);
        return;
      case FIRES:
        FireArray fires = (FireArray)value_;
        fires.write(oprot);
        return;
      case FORMAS:
        FormaArray formas = (FormaArray)value_;
        formas.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case LONGS:
          LongArray longs;
          longs = new LongArray();
          longs.read(iprot);
          return longs;
        case DOUBLES:
          DoubleArray doubles;
          doubles = new DoubleArray();
          doubles.read(iprot);
          return doubles;
        case SHORTS:
          ShortArray shorts;
          shorts = new ShortArray();
          shorts.read(iprot);
          return shorts;
        case INTS:
          IntArray ints;
          ints = new IntArray();
          ints.read(iprot);
          return ints;
        case FIRES:
          FireArray fires;
          fires = new FireArray();
          fires.read(iprot);
          return fires;
        case FORMAS:
          FormaArray formas;
          formas = new FormaArray();
          formas.read(iprot);
          return formas;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      return null;
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case LONGS:
        LongArray longs = (LongArray)value_;
        longs.write(oprot);
        return;
      case DOUBLES:
        DoubleArray doubles = (DoubleArray)value_;
        doubles.write(oprot);
        return;
      case SHORTS:
        ShortArray shorts = (ShortArray)value_;
        shorts.write(oprot);
        return;
      case INTS:
        IntArray ints = (IntArray)value_;
        ints.write(oprot);
        return;
      case FIRES:
        FireArray fires = (FireArray)value_;
        fires.write(oprot);
        return;
      case FORMAS:
        FormaArray formas = (FormaArray)value_;
        formas.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case LONGS:
        return LONGS_FIELD_DESC;
      case DOUBLES:
        return DOUBLES_FIELD_DESC;
      case SHORTS:
        return SHORTS_FIELD_DESC;
      case INTS:
        return INTS_FIELD_DESC;
      case FIRES:
        return FIRES_FIELD_DESC;
      case FORMAS:
        return FORMAS_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public LongArray getLongs() {
    if (getSetField() == _Fields.LONGS) {
      return (LongArray)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'longs' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setLongs(LongArray value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.LONGS;
    value_ = value;
  }

  public DoubleArray getDoubles() {
    if (getSetField() == _Fields.DOUBLES) {
      return (DoubleArray)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'doubles' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDoubles(DoubleArray value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.DOUBLES;
    value_ = value;
  }

  public ShortArray getShorts() {
    if (getSetField() == _Fields.SHORTS) {
      return (ShortArray)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'shorts' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setShorts(ShortArray value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.SHORTS;
    value_ = value;
  }

  public IntArray getInts() {
    if (getSetField() == _Fields.INTS) {
      return (IntArray)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'ints' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setInts(IntArray value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.INTS;
    value_ = value;
  }

  public FireArray getFires() {
    if (getSetField() == _Fields.FIRES) {
      return (FireArray)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'fires' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setFires(FireArray value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.FIRES;
    value_ = value;
  }

  public FormaArray getFormas() {
    if (getSetField() == _Fields.FORMAS) {
      return (FormaArray)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'formas' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setFormas(FormaArray value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.FORMAS;
    value_ = value;
  }

  public boolean isSetLongs() {
    return setField_ == _Fields.LONGS;
  }


  public boolean isSetDoubles() {
    return setField_ == _Fields.DOUBLES;
  }


  public boolean isSetShorts() {
    return setField_ == _Fields.SHORTS;
  }


  public boolean isSetInts() {
    return setField_ == _Fields.INTS;
  }


  public boolean isSetFires() {
    return setField_ == _Fields.FIRES;
  }


  public boolean isSetFormas() {
    return setField_ == _Fields.FORMAS;
  }


  public boolean equals(Object other) {
    if (other instanceof ArrayValue) {
      return equals((ArrayValue)other);
    } else {
      return false;
    }
  }

  public boolean equals(ArrayValue other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(ArrayValue other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    HashCodeBuilder hcb = new HashCodeBuilder();
    hcb.append(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      hcb.append(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        hcb.append(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        hcb.append(value);
      }
    }
    return hcb.toHashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
